### 강민수 풀이

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int s = 0, e = nums.size()-1;
        int mid = 0;
        while (s <= e) {
            mid = s + (e-s) / 2;
            if (nums[mid]==target) return mid;
            else if (nums[mid] < target) s = mid + 1;
            else e = mid - 1;


        }
        return s;   //mid + 1 이 안되는 이유 고찰해보기 
    }
};

왜 s를 반환하는지?
예시 [1,5]에 0 삽입, 4삽입, 6삽입하는 경우 각각 봤을 때 s가 모든 케이스에 적합함.
Because when high = low+1, then mid = low.
If the target > nums[mid], then low = mid + 1 = high. The target position can be low or high, since they are the same.
but if the target < nums[mid], then high = mid - 1 = low - 1. The target position must be low, not the high.
출처 : https://leetcode.com/problems/search-insert-position/solutions/1596479/c-3-solutions-well-explained-with-example-and-concise-solution
      /?envType=study-plan&id=algorithm-i&orderBy=most_votes


### 이원호 풀이 ##

class Solution {
public:
    int searchInsert(vector<int>& nums, int target)
    {
        int s=0,e=nums.size()-1;
        while(s<=e)
        {
            int mid=(s+e)/2;
            if(nums[mid]==target)
            {
                return mid;
            }
            else if(nums[mid]>target)
            {
                e=mid-1;
            }
            else
            {
                s=mid+1;
            }
        }
        if(nums.size()==1&&nums[0]==target)
            return 0;
        return s;
    }
};

704. Binary Search 와 거의 같으나 704. Binary Search에서 값이 없어서-1을 반환할때 이 문제에서는 인덱스를 반환해줌.
그 부분만 바꿔주면됨 -1->s
