### 강민수
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        for(auto& x:nums) {
            x *= x;
        }
        sort(nums.begin(),nums.end());
        return nums;
    }
};

Tp : O(nlogn) / Sp : O(1)

Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?
// 시간복잡도를 O(n)으로 유지할 수 없는가?
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        int min_i = 0;
        int min_val = 10001;
        int n = nums.size();
        for(int i = 0; i < n; i++){
            int t = nums[i];
            if (abs(nums[i]) < min_val) {
                min_i = i;
                min_val = abs(nums[i]);
            }
        }
        vector<int> v = {min_val*min_val};
        int fp = min_i - 1, sp = min_i + 1;
        while (1) {
            if (fp < 0) {
                while(sp < n) v.push_back(pow(nums[sp++],2));
                break;
            }
            else if (sp >= n){
                while(fp >= 0) v.push_back(pow(nums[fp--],2));
                break;
            } 
            if (pow(nums[fp],2) <= pow(nums[sp],2)) {
                v.push_back(pow(nums[fp--],2));
            }
            else {
                v.push_back(pow(nums[sp++],2));
            }
        }
        return v;
    }
};

// 코드가 복잡하긴 하지만 Tp : O(n), Sp : O(n)

// 더 좋은 풀이 : 역으로 끝에서부터 시작하기 -> 최솟값을 찾지 않아도 되서 효율적
class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
        vector<int> res(A.size());
        int l = 0, r = A.size() - 1;
        for (int k = A.size() - 1; k >= 0; k--) {
            if (abs(A[r]) > abs(A[l])) res[k] = A[r] * A[r--];
            else res[k] = A[l] * A[l++];
        }
        return res;
    }
};

----------------------------------------------------------------------------------

### 이원호 풀이 ###

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums)
    {
        for(int i=0; i<nums.size(); i++)
        {
            nums[i]*=nums[i];
        }
        sort(nums.begin(),nums.end());
        return nums;
    }
};

-> 정렬을 이용한 방법으로 시간복잡도 O(nlogn)

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums)
    {
        vector<int> v(nums.size());
        int s=0,e=nums.size()-1,x=nums.size()-1;
        while(s!=e)
        {
            if(nums[s]+nums[e]>=0)
            {
                v[x]=nums[e]*nums[e];
                e--,x--;
            }
            else
            {
                v[x]=nums[s]*nums[s];
                s++,x--;
            }
        }
        if(s==e)
            v[0]=nums[s]*nums[s];
        return v;
    }
};

-> 투포인터이용 방법으로 시간 복잡도 O(n)
양쪽에서 두개를 비교하면서 절댓값이 더 큰 것부터 뒤에 
