## 강민수 풀이
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        float cnt = 0;
        ListNode* result = head;
        while(head->next != NULL){
            head = head->next;
            cnt++;
        }
 
        for(int i = 0; i < ceil(cnt/2); i++){
            result = result->next;
        }
        return result;
    }
};
Tp : O(n) / Sp : O(n)


### 이원호 풀이 ###

class Solution {
public:
    ListNode* middleNode(ListNode* head)
    {
        int z=0;
        ListNode* s=head;
        while(s->next!=NULL)
        {
            s=s->next;
            z++;
        }
        if(z%2==0)
            z/=2;
        else
            z=z/2+1;
        s=head;
        for(int i=0; i<z; i++)
        {
            s=s->next;
        }
        cout<<z;
        return s;
    }
};
-> 한번 돌아서 중간 찾기




// 더 좋은 풀이
ListNode* middleNode(ListNode* head) {
        ListNode *slow = head, *fast = head;
        while (fast && fast->next)
            slow = slow->next, fast = fast->next->next;
        return slow;
    }

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 -> 잘 써먹기 바랍니다.


