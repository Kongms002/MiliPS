### 강민수 풀이

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> result;
        queue<pair<TreeNode*,int>> q;
        if(root) q.push(make_pair(root, 0));
        while(!q.empty()){
            TreeNode* t = q.front().first;
            int level = q.front().second; 
            if(result.size() <= level) result.push_back({});
            result[level].push_back(t->val);
            q.pop();
            if(t->left) q.push(make_pair(t->left, level + 1));
            if(t->right) q.push(make_pair(t->right, level + 1));
        }
        return result;
    }
};

// 좋은 풀이
vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> result;
        queue<TreeNode*> q; q.push(root);
        while (!q.empty())
        {
            int n = q.size();
            vector<int> crtLevel; crtLevel.reserve(n);
            for (int i = 0; i < n; i++)
            {
                TreeNode* p = q.front(); q.pop();
                if (p != nullptr)
                {
                    crtLevel.push_back(p->val);
                    q.push(p->left);
                    q.push(p->right);
                }
            }
            
            if (crtLevel.size() > 0) 
                result.push_back(move(crtLevel));
        }
        
        return result;
    }
