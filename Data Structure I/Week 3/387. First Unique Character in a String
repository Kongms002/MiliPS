### 이원호 풀이 ###

class Solution {
public:
    int firstUniqChar(string s)
    {
        int a[26]={0,};
        for(int i=0; i<s.size(); i++)
        {
            a[s[i]-97]++;
        }
        for(int i=0; i<s.size(); i++)
        {
            if(a[s[i]-97]==1)
                return i;
        }
        return -1;
    }
};

처음에 반복문으로 각 문자가 몇번 나왔는지 찾은 후 그 다음 반복문으로 i번째 문자가 1번만 나왔다면 그 인덱스값 리턴, 없으면 -1 리턴.

## 
class Solution {
public:
    int firstUniqChar(string s) {
        unordered_map<char, int> cnt;
        for (auto c:s){
            cnt[c] += 1;
        }
        for (int i=0;i<s.size();i++){
            if (cnt[s[i]] == 1) return i;
        }
        return -1;
    }
};


다른 풀이 

class Solution {
public:
	int firstUniqChar(string s) {
        unordered_map<char, pair<int, int>> m;
        int idx = s.size();
        for (int i = 0; i < s.size(); i++) {
            m[s[i]].first++;
            m[s[i]].second = i;
        }
        for (const auto& [c, p] : m) {
            if (p.first == 1) {
                idx = min(idx, p.second);
            }
        }
        return idx == s.size() ? -1 : idx;
    }
};

맵을 이용한 풀이
