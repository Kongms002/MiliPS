# 강민수 풀이

// dp를 이용한 풀이
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n);
        dp[0] = nums[0];
        int maxsum = nums[0];
        for (int i = 1; i< n; i++){
            dp[i] = max(nums[i], nums[i] + dp[i-1]);
            maxsum = max(maxsum, dp[i]);
        }
        return maxsum;
    }
};

Tp : O(N) / Sp : O(N)

// 분할정복 알고리즘
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        return maxSubArray(nums, 0, size(nums)-1);
    }
    int maxSubArray(vector<int>& A, int L, int R){
        if(L > R) return INT_MIN;
        int mid = (L + R) / 2, leftSum = 0, rightSum = 0;
        // leftSum = max subarray sum in [L, mid-1] and starting from mid-1
        for(int i = mid-1, curSum = 0; i >= L; i--)
            curSum += A[i],
            leftSum=max(leftSum, curSum);
        // rightSum = max subarray sum in [mid+1, R] and starting from mid+1
        for(int i = mid+1, curSum = 0; i <= R; i++)
            curSum += A[i],
            rightSum = max(rightSum, curSum);        
		// return max of 3 cases 
        return max({ maxSubArray(A, L, mid-1), maxSubArray(A, mid+1, R), leftSum + A[mid] + rightSum });
    }	
};



// 분할정복??



### 이원호 풀이 ###

class Solution {
public:
    int maxSubArray(vector<int>& nums)
    {
        int z[nums.size()],h=-10000;
        h=z[0]=nums[0];
        for(int i=1; i<nums.size(); i++)
        {
            z[i]=nums[i]<z[i-1]+nums[i]?z[i-1]+nums[i]:nums[i];
            if(z[i]>h)
                h=z[i];
        }
        return h;
    }
};
-> 카데인 알고리즘 O(n) (최장증가부분수열 구하는 LIS알고리즘과 비슷)
