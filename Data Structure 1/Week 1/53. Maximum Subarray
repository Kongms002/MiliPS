# 강민수 풀이

// dp를 이용한 풀이
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n);
        dp[0] = nums[0];
        int maxsum = nums[0];
        for (int i = 1; i< n; i++){
            dp[i] = max(nums[i], nums[i] + dp[i-1]);
            maxsum = max(maxsum, dp[i]);
        }
        return maxsum;
    }
};

Tp : O(N) / Sp : O(N)

개선된 알고리즘
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        dp[0] = nums[0];
        int maxsum = nums[0];
        for (int i = 1; i< n; i++){
            dp[i] = max(nums[i], nums[i] + dp[i-1]);
            maxsum = max(maxsum, dp[i]);
        }
        return maxsum;
    }
};




// 분할정복??
